export class Emitter {
    single() {
        return new Promise(resolve => {
            const subscription = this.listen((data) => {
                subscription.dispose();
                resolve(data);
            });
        });
    }
    [Symbol.asyncIterator]() {
        return new _StreamIterator(this);
    }
}
class _StreamIterator {
    constructor(emitter) {
        this.#queue = [];
        emitter.listen(value => {
            this.#queue.push({ done: false, value: value });
            this.onPush();
        }, {
            onClose: () => {
                this.#queue.push({ done: true, value: undefined });
                this.onPush();
            }
        });
    }
    [Symbol.asyncIterator]() {
        return this;
    }
    async next() {
        if (this.#queue.length === 0)
            await new Promise(resolve => this.onPush = resolve);
        return this.#queue.shift();
    }
    #queue;
    onPush = () => { };
}
