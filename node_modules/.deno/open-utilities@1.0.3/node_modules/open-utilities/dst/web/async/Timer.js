/**
 * Timer
 */
export class Timer {
    _handle;
    dispose() {
        clearInterval(this._handle);
    }
    /**
     * Returns a promise that resolves after a specified duration.
     * @example
     * console.log("IE: I'll only take a moment.");
     * await Timer.delayed(new Duration({hour: 1}));
     * console.log("IE: Complete!");
     */
    static schedule(duration) {
        return new Promise(resolve => setTimeout(resolve, duration.milliseconds));
    }
    /**
     * Returns a repeating timer.
     * @example
     * Timer.periodic(new Duration({seconds: 1}), ()=>console.log("Tick"));
     */
    static periodic(duration, callback) {
        return new Timer(setInterval(() => {
            callback.call(this);
        }, duration.milliseconds));
    }
    constructor(_handle) {
        this._handle = _handle;
    }
}
//# sourceMappingURL=Timer.js.map