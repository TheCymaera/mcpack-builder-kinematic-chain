/**
 * A IndexedDB-based Map
 */
export declare class IDBMap<K extends IDBValidKey, V> {
    #private;
    readonly database: IDBDatabase;
    storeName: string;
    private constructor();
    static create<K extends IDBValidKey, V>(options: IDBMap.CreateOptions): Promise<IDBMap<K, V>>;
    static delete(name: string): Promise<void>;
    get(key: K): Promise<V | undefined>;
    set(key: K, value: V): Promise<void>;
    delete(key: K): Promise<void>;
    clear(): Promise<void>;
    entries(): AsyncIterableIterator<[K, V]>;
}
export declare namespace IDBMap {
    interface CreateOptions {
        name: string;
        storeName?: string;
    }
    class ConnectionError extends Error {
        constructor(reason: string);
    }
    class RequestError extends Error {
        constructor(reason: string);
    }
}
