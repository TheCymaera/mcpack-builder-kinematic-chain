import { FileSystem } from "../../core/storage/FileSystem.js";
import { URI } from "../../core/paths/URI.js";
/**
 * @experimental
 */
export class FSAFileSystem extends FileSystem {
    scheme = "fsa";
    handles;
    onRegisterHandle = new Set;
    constructor(handles = new Map) {
        super();
        this.handles = handles;
    }
    registerHandle(authority, handle) {
        this.handles.set(authority, handle);
        const uri = new URI(this.scheme, authority);
        for (const callback of this.onRegisterHandle)
            callback({ uri });
        return uri;
    }
    availableAuthority(name) {
        let out = name, i = 0;
        while (this.handles.has(out))
            out = `${name} ${++i}`;
        return out;
    }
    async getURI(handle) {
        if (handle instanceof FileSystemFileHandle) {
            for (const [authority, root] of this.handles) {
                if (root instanceof FileSystemFileHandle && await root.isSameEntry(handle)) {
                    return new URI(this.scheme, authority);
                }
            }
        }
        else {
            for (const [authority, root] of this.handles) {
                if (root instanceof FileSystemDirectoryHandle) {
                    const path = await root.resolve(handle);
                    if (path)
                        return new URI(this.scheme, authority, "/" + path.join("/"));
                }
            }
        }
        return undefined;
    }
    async readFile(uri) {
        const handle = await this._getFile(uri, false);
        const file = await handle.getFile();
        return await file.arrayBuffer();
    }
    async writeFile(uri, content) {
        const handle = await this._getFile(uri, true);
        // TODO: Remove when TS updates definitions.
        // @ts-expect-error
        const writable = await handle.createWritable();
        await writable.write(content);
        await writable.close();
    }
    async createDirectory(uri) {
        await this._getDirectory(uri, true);
    }
    async _getFile(uri, create) {
        if (uri.isOrigin())
            return await this._getRoot(uri, "file");
        const parent = await this._getDirectory(uri, create);
        return await parent.getFileHandle(uri.filename(), { create });
    }
    async _getDirectory(uri, create) {
        let handle = await this._getRoot(uri, "directory");
        for (const segment of uri.directorySegments()) {
            handle = await handle.getDirectoryHandle(segment, { create });
        }
        return handle;
    }
    async _getRoot(uri, kind) {
        const handle = this.handles.get(uri.authority);
        if (!handle)
            throw new Error(`Resource not found.`);
        if (uri.isOrigin() || handle.kind !== kind)
            throw new Error(`Illegal Operation!`);
        return handle;
    }
}
//# sourceMappingURL=FSAFileSystem.js.map