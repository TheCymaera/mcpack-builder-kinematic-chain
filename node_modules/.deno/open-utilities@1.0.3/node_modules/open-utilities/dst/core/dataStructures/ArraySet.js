export class ArraySet {
    #values;
    constructor(values) {
        this.#values = values ? [...values] : [];
    }
    add(value) {
        if (!this.#values.includes(value)) {
            this.#values.push(value);
        }
        return this;
    }
    clear() {
        this.#values = [];
    }
    delete(value) {
        const index = this.#values.indexOf(value);
        if (index === -1)
            return false;
        this.#values.splice(index, 1);
        return true;
    }
    forEach(callbackfn, thisArg) {
        this.#values.forEach(value => callbackfn(value, value, this));
    }
    has(value) {
        return this.#values.includes(value);
    }
    get size() {
        return this.#values.length;
    }
    entries() {
        return this.#values.map(value => [value, value])[Symbol.iterator]();
    }
    keys() {
        return this.#values[Symbol.iterator]();
    }
    values() {
        return this.#values[Symbol.iterator]();
    }
    [Symbol.iterator]() {
        return this.#values[Symbol.iterator]();
    }
    [Symbol.toStringTag] = "ArraySet";
}
//# sourceMappingURL=ArraySet.js.map