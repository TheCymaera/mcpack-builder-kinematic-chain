/**
 * A resource that needs to be disposed, such as an event listener.
 * @example
 * const id = setInterval(callback, 1000);
 * return new Disposable(()=>clearInterval(id));
 */
export class Disposable {
    // TODO: Remove this if this TC39 proposal is accepted:
    // https://github.com/tc39/proposal-explicit-resource-management
    constructor(dispose) {
        this.dispose = dispose;
    }
    dispose() {
        // do nothing
    }
    static is(value) {
        return value && "dispose" in value;
    }
    static all(...disposables) {
        return new Disposable(() => {
            for (const disposable of disposables) {
                if (Disposable.is(disposable))
                    disposable.dispose();
            }
        });
    }
    static empty = new Disposable(() => undefined);
}
//# sourceMappingURL=Disposable.js.map