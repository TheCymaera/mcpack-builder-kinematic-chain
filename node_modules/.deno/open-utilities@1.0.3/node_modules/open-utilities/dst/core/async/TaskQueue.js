import { Disposable } from "../memory/Disposable.js";
export class TaskQueue {
    maxConcurrent = 1;
    push(task) {
        this.#queue.push(task);
        this.#onChange();
        return new Disposable(() => this.delete(task));
    }
    delete(task) {
        for (let i = 0; i < this.#queue.length; i++) {
            if (this.#queue[i] === task) {
                this.#queue.splice(i, 1);
                this.#onChange();
                return;
            }
        }
    }
    clear() {
        this.#queue.length = 0;
        this.#onChange();
    }
    pause() {
        this.#isPaused = true;
    }
    unpause() {
        this.#isPaused = false;
        this.#onChange();
    }
    async #onChange() {
        if (this.#isPaused)
            return;
        if (this.#running > this.maxConcurrent)
            return;
        if (this.#queue.length === 0)
            return;
        this.#running += 1;
        try {
            await this.#queue[0]();
        }
        catch (e) { }
        this.#running -= 1;
        this.#queue.shift();
        this.#onChange();
    }
    #isPaused = false;
    #running = 0;
    #queue = [];
}
//# sourceMappingURL=TaskQueue.js.map